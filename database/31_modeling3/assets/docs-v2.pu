@startuml docs-v2

skinparam linetype ortho

note as 疑問点
    Q1
    ドキュメントに共通するカラムは
    別の共通子テーブルにわけたほうが
    いいのでは
    (下書きと公開で文書内容が同じで
     あることを保証したい)

    Q2
    交差テーブルを使用して、共通子テーブル
    との紐づけで表現することも可能では?
end note

package ユーザ {
    entity ユーザ {
        * ユーザID
        ---
        ユーザ名
    }
}

package ドキュメント {
    entity ドキュメント {
        * ドキュメントID
        ---
    }

    note top of ドキュメント
        他のテーブルとの依存関係のある
        親テーブルは可能な限りUPDATEしない

        UPDATEしたい場合は1対1の
        子テーブルを作成して、
        そちらにINSERT/DALETEを
        使用する
    end note

    entity 下書きドキュメント {
        下書きドキュメントID
        ---
        + ドキュメントID [FK]
        文書内容
        作成日
    }

    note bottom of 下書きドキュメント
        実際には下書きを実行しているタイミングで
        何度も文書内容に対して更新がかかる

        しかしこの状態だと、親テーブルに対して
        UPDATEするために、ロックを取得してしまう
    end note

    entity 公開ドキュメント {
        公開ドキュメントID
        ---
        + ドキュメントID [FK]
        文書内容
        公開日
    }

    entity 削除ドキュメント {
        削除ドキュメントID
        ---
        + ドキュメントID [FK]
        文書内容
        削除日
    }

    entity ドキュメント所有 {
        * ユーザID [FK]
        * ドキュメントID [FK]
    }

    entity ドキュメント場所 {
        * ディレクトリID [FK]
        * ドキュメントID [FK]
    }

    ユーザ ||-r-o{ ドキュメント所有
    ドキュメント ||-l-|{ ドキュメント所有
    ディレクトリ ||-l-o{ ドキュメント場所
    ドキュメント ||-r-|{ ドキュメント場所

    ドキュメント ||--|| 下書きドキュメント
    ドキュメント ||--|| 公開ドキュメント
    ドキュメント ||--|| 削除ドキュメント
}

package ディレクトリ {
    entity ディレクトリ {
        * ディレクトリID
        --
        ディレクトリ名
    }

    entity ディレクトリ構造 {
        * 親ディレクトリID [FK]
        * 子ディレクトリID [FK]
    }

    ディレクトリ ||--|{ ディレクトリ構造
    ディレクトリ ||--|{ ディレクトリ構造
}

@enduml